h1{                          <--here h1 is an element that needs the property: property kind-->
    text-align: center;      <--the text color markers will be aligned to the center-->
 background-color: rgb(0,255,255) cyan
} 
  
  .marker{                 <-- here marker is the class that in the marker website will represent color red of background whole class the includes markers-->
 */background-color: red; /remove this 
height: 25px;              <-- it creates a box like red color and it is in the left most-->
width: 200px;             <-- Your marker would look better if it was centered on the page. An easy way to do that is with the margin shorthand property.-->
 margin: 10px auto;            <-- To center your marker on the page, set its margin property to auto. This sets margin-top, margin-right, margin-bottom, and margin-left all to auto.--
}                               <--While you have three separate marker div elements, they look like one big rectangle. You should add some space between them to make it easier to see each element.When the shorthand margin property has two values, it sets margin-top and margin-bottom to the first value, and margin-left and margin-right to the second value.
In your .marker CSS rule, set the margin property to 10px auto.
.one{                              <-- this is the class one in the marker >
    background-color: rgb(255,0,0);A function is a piece of code that can take an input and perform a specific action. The CSS rgb function accepts values, or arguments, for red, green, and blue, and produces a color:
 to create a yellow color instead of red change the red and green to 255 as they form yellow color.
 background-color: rgb(255,255,0);
    rgb(red, green, blue); Each red, green, and blue value is a number from 0 to 255. 0 means that there's 0% of that color, and is black. 255 means that there's 100% of that color
    background-color: rgb(255,127,0); this creates a tertIARY color orange. Notice that, to create orange, you had to increase the intensity of red and decrease the intensity of the green rgb values. This is because orange is the combination of red and yellow, and falls between the two colors on the color wheel.
  }
  .two{
 background-color: rgb(0,127,0); While the red and blue markers look the same, the green one is much lighter than it was before. This is because the green color keyword is actually a darker shade, and is about halfway between black and the maximum value for green.
    In the .two CSS rule, set the green value in the rgb function to 127 to lower its intensity.
    background-color: rgb(0,255,0); n the additive RGB color model, primary colors are colors that, when combined, create pure white. But for this to happen, each color needs to be at its highest intensity.
    background-color: rgb(0,255,255); to turn the color from green to cyan, they form form high intensity green and blue.
    background-color: rgb(0,255,127); this forms spring green.
  }
  .three{
    background-color: rgb(0,0,255);
    background-color: rgb(255,0,255);To create the final secondary color, magenta, update the rgb function in the .three CSS rule to combine pure blue and pure red.
    background-color: rgb(127,0,255); to create violet.
  }
  There are three more tertiary colors: chartreuse green (green + yellow), azure (blue + cyan), and rose (red + magenta).
  .one {
    background-color: rgb(127, 255, 0); chartreuse green(color)
  }
  
  .two {
    background-color: rgb(0, 127, 255); azure(color)
  }
  
  .three {
    background-color: rgb(255, 0, 127); rose(color)
  }
  A color wheel is a circle where similar colors, or hues, are near each other, and different ones are further apart. For example, pure red is between the hues rose and orange.
Two colors that are opposite from each other on the color wheel are called complementary colors. If two complementary colors are combined, they produce gray. But when they are placed side-by-side, these colors produce strong visual contrast and appear brighter.
.one {
    background-color: rgb(255, 0, 0);
  }
  
  .ttttttttwo {
    background-color: rgb(0, 255, 255);
  }
  Notice that the red and cyan colors are very bright right next to each other. This contrast can be distracting if it's overused on a website, and can make text hard to read if it's placed on a complementary-colored background.
It's better practice to choose one color as the dominant color, and use its complementary color as an accent to bring attention to certain content on the page 

Notice how your eyes are naturally drawn to the red color in the center? When designing a site, you can use this effect to draw attention to important headings, buttons, or links.
There are several other important color combinations outside of complementary colors, but you'll learn those a bit later. The red color is looking like it is sandwiched between the two black color.
.one {
    background-color: rgb(0, 0, 0);
  }
  .two {
    background-color: rgb(255, 0, 0);
  }
  .three {
    background-color: rgb(0, 0, 0);
  }
  NOW THAT ALL THREE COLORS ARE BLACK CHANGE THE CLASS ONE TO RED AS DONE IN FIRST MARKER
  SIMILARLY NOW THE RED CLASS REPRESENTS THE RED COLOR SO THE 0 TURNS TO 255
  .red {
    background-color: rgb(255, 0, 0);
  }
  NOW THAT ALL THREE COLORS ARE BLACK CHANGE THE CLASS TWO TO GREEN AS DONE IN FIRST MARKER
  SIMILARLY NOW THE RED CLASS REPRESENTS THE GREEN COLOR SO THE 0 TURNS TO 255
  .green{
    background-color: rgb(0, 255, 0);
  }
  NOW THAT ALL THREE COLORS ARE BLACK CHANGE THE CLASS THREE TO BLUE AS DONE IN FIRST MARKER
  SIMILARLY NOW THE RED CLASS REPRESENTS THE BLUE COLOR SO THE 0 TURNS TO 255
  .blue {
    background-color: rgb(0, 0, 255);
  }
  A very common way to apply color to an element with CSS is with hexadecimal or hex values. While hex values sound complicated, they're really just another form of RGB values.
Hex color values start with a # character and take six characters from 0-9 and A-F.
.green {
    background-color: #00FF00;
  }
  Lower the intensity of green by setting the green value of the hex color to 7F.
  .green {
    background-color: #007F00;
  }
  With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green, and 0% blue, and is the same as rgb(0, 255, 0).
  The HSL color model, or hue, saturation, and lightness, is another way to represent colors.
The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, and a percentage from 0 to 100 for lightness.
If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.
Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. You must add the percent sign % to the saturation and lightness values.
Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral.
.blue {
    background-color: hsl(240,100%,50%);
  }
  A gradient is when one color transitions into another. The CSS linear-gradient function lets you control the direction of the transition along a line, and which colors are used.
One thing to remember is that the linear-gradient function actually creates an image element, and is usually paired with the background property which can accept an image as a value.
The linear-gradient function is very flexible -- here is the basic syntax you'll use in this tutorial:
linear-gradient(gradientDirection, color1, color2, ...); gradientDirection is the direction of the line used for the transition. color1 and color2 are color arguments, which are the colors that will be used in the transition itself. These can be any type of color, including color keywords, hex, rgb, or hsl.
.red {
    background: linear-gradient(90deg, rgb(255, 0, 0), rgb(0, 255, 0), rgb(0,0,255));
  } you can even add the third color for the gradient of blue
As you can see, the linear-gradient function produced a smooth red-green gradient. While the linear-gradient function needs a minimum of two color arguments to work, it can accept many color arguments.
Color-stops allow you to fine-tune where colors are placed along the gradient line. They are a length unit like px or percentages that follow a color in the linear-gradient function.
.red {
    background: linear-gradient(90deg,  rgb(255, 0, 0) 75%, rgb(0, 255, 0), rgb(0, 0, 255));
  }
  In the linear-gradient function, set gradientDirection to 180deg.
  to create ND MAKE IT LOOK LIKE VERTICAL GRdient i.e. 90deg to 180deg.
  .red{
    background: linear-gradient(180deg, rgb(255, 0, 0) 0%, rgb(0, 255, 0) 50%, rgb(0, 0, 255) 100%)
  } in this when they are applied 0%, 50%, 100% they look like equally gradient vertically.
  The shades on the top and bottom edges of the marker will be darker, while the one in the middle will be lighter, as if there's a light above it
so trun the rgb red to(122,74,14), green rgb(245,62,113), blue rgb to(262,27,27) this creates a beautiful gradient of color red. Dark from the above and light in the middle then dark for the marker.
.red {
y6tt    background: linear-gradient(180deg, rgb(122, 74, 14) 0%, rgb(245, 62, 113) 50%, rgb(162, 27, 27) 100%);
  } Even without the color-stops, you might have noticed that the colors for the green marker transition at the same points as the red marker. The first color is at the start (0%), the second is in the middle (50%), and the last is at the end (100%) of the gradient line.
  The linear-gradient function automatically calculates these values for you, and places colors evenly along the gradient line by default.
SO YOU CAN REMOVE THE 0%,50% AND 100% TO CLEAN THE CODE.
.green {
    background: linear-gradient(180DEG, #55680D, #71F53E, #116C31);
  }
  If no gradientDirection argument is provided to the linear-gradient function, it arranges colors from top to bottom, or along a 180 degree line, by default.
  .red {
    background: linear-gradient(, rgb(122, 74, 14) 0%, rgb(245, 62, 113) 50%, rgb(162, 27, 27) 100%);
  
  } 
  .green {
    background: linear-gradient(, #55680D, #71F53E, #116C31);
  }
  SIMILARLY FOR BLUE 
  .blue {
    background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
  }
  
.container{                              There are two main color models: the additive RGB (red, green, blue) model used in electronic devices, and the subtractive CMYK (cyan, magenta, yellow, black) model used in print.In this project, you'll work with the RGB model. This means that colors begin as black, and change as different levels of red, green, and blue are introduced. An easy way to see this is with the CSS rgb function
    background-color: rgb(0,0,0);
    background-color: rgb(255,255,255); Now that you have the primary RGB colors, it's time to combine them.For the rgb function in the .container rule, set the red, green, and blue values to the max of 255.
    padding-top: 10px;                      Now add a little more vertical space between your markers and the edge of the container element they're in.
    In the .container CSS rule, use the shorthand padding property
    padding-bottom:10px;
    padding-left:0;
    padding-right:0;
  }
  .sleeve{                new rule for the class sleeve 
    width: 110px;
    height: 25px;
    background-color: white;  to make it more prominent
    Opacity describes how opaque, or non-transparent, something is. For example, a solid wall is opaque, and no light can pass through. But a drinking glass is much more transparent, and you can see through the glass to the other side.
With the CSS opacity property, you can control how opaque or transparent an element is. With the value 0, or 0%, the element will be completely transparent, and at 1.0, or 100%, the element will be completely opaque like it is by default.
opacity: 0.5;
Another way to set the opacity for an element is with the alpha channel. Similar to the opacity property, the alpha channel controls how transparent or opaque a color is.
You've already set sleeve's opacity with a named color and the opacity property, but you can add an alpha channel to the other CSS color properties.

}
You're already familiar with using the rgb function to set colors. To add an alpha channel to an rgb color, use the rgba function instead.
The rgba function works just like the rgb function, but takes one more number from 0 to 1.0 for the alpha channel:
rgba(redValue, greenValue, blueValue, alphaValue);
You can also use an alpha channel with hsl and hex colors. You will see how to do that soon.
.sleeve {
    width: 110px;
    height: 25px;
    background-color: rgba(255, 255, 255, 0.5);   
    The border-left shorthand property lets you to set the left border's width, style, and color at the same time.
Here is the syntax:border-left: width style color;
border-left : 10px solid black; change solid to double to make it more realistic
border-left : 10px double black; change the black to rgba to reduce opacity as it is too harsh on the .sleeve
border-left: 10px double rgba(0, 0, 0, 0.75);
  }
  It looks like your sleeve disappeared, but don't worry -- it's still there. What happened is that your new cap div is taking up the entire width of the marker, and is pushing the sleeve down to the next line.
This is because the default display property for div elements is block. So when two block elements are next to each other, they stack like actual blocks. For example, your marker elements are all stacked on top of each other.To position two div elements on the same line, set their display properties to inline-block.
.cap, .sleeve {
    display: inline-block;   this brings both the sleeve and cap aamne saamne lol
  }

 The box-shadow property lets you apply one or more shadows around an element. Here is basic syntax:
box-shadow: offsetX offsetY color;
Here's how the offsetX and offsetY values work:
both offsetX and offsetY accept number values in px and other CSS units
a positive offsetX value moves the shadow right and a negative value moves it left
a positive offsetY value moves the shadow down and a negative value moves it up
if you want a value of zero (0) for any or both offsetX and offsetY, you don't need to add a unit. Every browser understands that zero means no change.
The height and width of the shadow is determined by the height and width of the element it's applied to. You can also use an optional spreadRadius value to spread out the reach of the shadow. More on that later.
.red {
    background: linear-gradient(, rgb(122, 74, 14) 0%, rgb(245, 62, 113) 50%, rgb(162, 27, 27) 100%);
    box-shadow: -5px -5px red;
  } 
  Notice that the edges of the shadow are sharp. This is because there is an optional blurRadius value for the box-shadow property:

  box-shadow: offsetX offsetY blurRadius color;
  If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. The higher the value of blurRadius, the greater the blurring effect is.
  .green {
    background: linear-gradient(#55680D, #71F53E, #116C31);
    box-shadow: 5px 5px 5px green;
   OR  box-shadow: 0 0 20px 0 #3B7E20CC;
  }
  But what if you wanted to expand the shadow out further? You can do that with the optional spreadRadius value:
box-shadow: offsetX offsetY blurRadius spreadRadius color;
.blue {
    background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
    box-shadow: 0 0 0 5px blue;
   OR  box-shadow: 0 0 20px 0 hsla(223, 59%, 31%, 0.8);
  }
  .red {
    background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
    box-shadow: 0 0 20px 0 red; similar to blue
    OR box-shadow: 0 0 20px 0 rgba(83, 14, 14, 0.8);
}
